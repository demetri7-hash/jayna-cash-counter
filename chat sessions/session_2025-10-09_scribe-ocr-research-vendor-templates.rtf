{\rtf1\ansi\deff0
{\fonttbl{\f0 Courier New;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;}

\f0\fs20

SESSION: OCR Accuracy Analysis & Scribe.js Research\line
DATE: 2025-10-09\line
DURATION: ~45 minutes\line
CONTEXT: Continuation - OCR improvements testing phase\line
\line
==================== SESSION SUMMARY ====================\line
\line
USER uploaded 2 PDFs for OCR accuracy comparison:\line
1. Original: Epson_10092025164750.pdf (11 pages, 13MB)\line
   - Performance Foodservice (page 1 - ROTATED 90 degrees)\line
   - Greenleaf (pages 2-3, 5, 7-8)\line
   - Mani Imports (pages 4, 9)\line
   - Alsco Uniforms (page 6)\line
   - Eatopia Foods (pages 10-11)\line
\line
2. Debug Output: ocr-debug-2025-10-10.pdf (11 pages, 2.4MB)\line
   - Generated by current Tesseract.js OCR system\line
   - Shows extracted fields, line items, math validation, raw OCR text\line
\line
==================== OCR ACCURACY ANALYSIS ====================\line
\line
CRITICAL FINDINGS:\line
\line
1. INVOICE NUMBERS - 10% Accuracy (SEVERE)\line
   - Greenleaf: Extracted "Co", "CA-FRE", "AS", "oo" instead of real invoice #s\line
   - Mani: "OICE" instead of "0079185-IN"\line
   - Alsco: "For" instead of "LSAC2174545"\line
   - Eatopia: "OICE" instead of "16513"/"16512"\line
\line
2. LINE ITEM QUANTITIES - 20% Accuracy (CRITICAL)\line
   Example failures:\line
   - Greenleaf LIMES: Actual=15 EA, OCR=1606 EA (106x error!)\line
   - Greenleaf MILK: Actual=2 EA @ $6.20, OCR=6.2 EA @ $12.40 (3.1x error)\line
   - Math validation flags show ⚠ but wrong base data\line
\line
3. VENDOR DETECTION - 60% Accuracy (MODERATE)\line
   - ✓ Greenleaf, Mani, Eatopia detected correctly\line
   - ✗ Alsco extracted as "Doe Sep"\line
   - ✗ Performance complete failure (page rotated)\line
\line
4. PAGE 1 COMPLETE FAILURE\line
   - Performance Foodservice invoice rotated 90°\line
   - Extracted gibberish: "I HOOHE ere 1% x", "if - Peak Brn crews"\line
   - NO usable data extracted\line
\line
5. UNIT EXTRACTION - 30% Accuracy\line
   - Sometimes captures EA, CS, DZ, LB correctly\line
   - Often defaults to "N/A" when units present\line
   - Greenleaf pipe format | qty | UOM | not reliably parsed\line
\line
==================== RESEARCH: SCRIBE.JS ====================\line
\line
USER REQUESTED: Find better OCR system designed for invoices\line
\line
KEY FINDING: **SCRIBE.JS**\line
\line
ADVANTAGES:\line
+ 40-90% slower BUT significantly MORE ACCURATE than Tesseract\line
+ Built-in TABLE EXTRACTION (can export to Excel)\line
+ Better font recognition (Tesseract can't do this)\line
+ Full PDF support (extract text layers + OCR images)\line
+ Designed for proofreading workflow (98% → 100% accuracy)\line
+ Fewer word misidentifications on high-quality scans\line
+ Recognizes words Tesseract skips entirely\line
\line
DISADVANTAGES:\line
- 40-90% slower (but accuracy > speed for invoices)\line
- AGPL 3.0 license (must open-source OR buy commercial license)\line
- Requires JavaScript integration (we already use Tesseract.js)\line
\line
GITHUB: https://github.com/scribeocr/scribe.js/\line
TABLE DOCS: http://docs.scribeocr.com/tables.html\line
\line
==================== INVOICE2DATA TEMPLATES ====================\line
\line
DISCOVERED: invoice2data Python library approach\line
- Template-based extraction using YAML/JSON files\line
- Vendor-specific regex patterns for field locations\line
- Keyword matching for auto-vendor detection\line
- Reverse domain naming: country.company.division.language.yml\line
\line
TEMPLATE REQUIREMENTS:\line
- Must have: amount, date, invoice_number (minimum)\line
- Keywords: Tax number + company name (for auto-detection)\line
- Regex patterns for each field\line
- Optional: coordinate-based cropping for complex layouts\line
\line
GITHUB: https://github.com/invoice-x/invoice2data\line
\line
==================== PROPOSED SOLUTION ====================\line
\line
HYBRID APPROACH:\line
\line
1. **Scribe.js for OCR** (replaces Tesseract.js)\line
   - Better accuracy for text extraction\line
   - Built-in table extraction\line
   - Auto-rotation detection\line
\line
2. **Vendor Template System** (invoice2data-style)\line
   - YAML/JSON templates per vendor\line
   - Keyword-based auto-detection\line
   - Regex patterns for field extraction\line
   - Fallback to manual vendor selection\line
\line
3. **Vendor-Specific Parsers**\line
   - Greenleaf: Pipe-delimited table parser\line
   - Mani: Standard table format\line
   - Performance: Auto-rotation + standard parser\line
   - Alsco: Simple line items\line
   - Eatopia: Product-based extraction\line
\line
==================== VENDOR MAPPING NEEDED ====================\line
\line
USER'S VENDORS:\line
\line
1. **Greenleaf**\line
   - Format: Pipe-delimited | ordered | shipped | UOM | product# | desc | unit_price | ext_price\line
   - Usually 2 pages\line
   - Invoice # location: Top right "Number | Date" box\line
   - Need to confirm: Always 2 pages? Total location?\line
\line
2. **Mani Imports**\line
   - Format: Standard table with MANI logo header\line
   - Invoice # format: XXXXXXX-IN\line
   - Need to confirm: Typical page count?\line
\line
3. **Performance Foodservice**\line
   - Format: Standard (but ROTATED 90°!)\line
   - Need to confirm: Scanner issue or always rotated?\line
   - Need unique identifier for auto-detection\line
\line
4. **Alsco Uniforms**\line
   - Format: Simple line items\line
   - Currently detected as "Doe Sep" (WRONG)\line
\line
5. **Eatopia Foods**\line
   - Format: Product-based (baklava, specialty items)\line
   - Good detection currently\line
\line
QUESTIONS FOR USER:\line
- Which vendor scanned MOST frequently? (start there)\line
- Greenleaf: Always 2 pages? Invoice # and Total locations?\line
- Mani: Typical page count?\line
- Performance: Why rotated? Always like that?\line
\line
==================== RECOMMENDATIONS (1-5) ====================\line
\line
USER APPROVED ALL:\line
\line
1. **Add pre-rotation detection**\line
   - Detect 90°/180°/270° rotation\line
   - Auto-rotate before OCR\line
   - Critical for Performance invoices\line
\line
2. **Improve invoice number extraction**\line
   - Currently extracts random fragments\line
   - Use vendor templates with regex patterns\line
   - Position-based extraction\line
\line
3. **Fix quantity decimal handling**\line
   - 2.00 becoming 6.2 (wrong)\line
   - 15 becoming 1606 (catastrophic)\line
   - Better number parsing logic\line
\line
4. **Strengthen Greenleaf pipe-parser**\line
   - Dedicated parser for | ordered | shipped | UOM | format\line
   - Column position detection\line
   - Handle inconsistent pipe placement\line
\line
5. **Add vendor-specific templates**\line
   - Pre-loaded layouts for known vendors\line
   - Auto-detection via keywords\line
   - Manual vendor selection if unknown\line
   - "Create New Vendor" with template wizard\line
\line
==================== WORKFLOW DESIGN ====================\line
\line
USER REQUIREMENTS:\line
\line
1. **Auto-Vendor Detection**\line
   - System TRIES to identify vendor from OCR text\line
   - Shows detected vendor name (editable)\line
   - If unknown: manual dropdown selection OR "Create New Vendor"\line
\line
2. **New Vendor Creation**\line
   - Auto-fills vendor name from OCR detection\line
   - User can edit before saving\line
   - Creates vendor template for future scans\line
\line
3. **Template Mapping**\line
   - User can help map vendor-specific layouts\line
   - Point-and-click field identification\line
   - Save template for reuse\line
\line
==================== NEXT STEPS ====================\line
\line
IMMEDIATE:\line
1. Implement Scribe.js OCR engine (replace Tesseract.js)\line
2. Add auto-rotation detection\line
3. Create vendor template system (YAML/JSON)\line
4. Build vendor auto-detection logic\line
5. Create templates for top 3 vendors (user to specify priority)\line
\line
PENDING USER INPUT:\line
- Which vendor to map first? (most frequently scanned)\line
- Greenleaf template details (page count, field locations)\line
- Mani template details\line
- Performance rotation issue explanation\line
\line
==================== FILES MODIFIED ====================\line
\line
NONE (research session only)\line
\line
==================== GIT STATUS ====================\line
\line
Clean - all previous work committed and pushed\line
\line
Last commits:\line
- ffcdaa0: fix(training): Initialize usedQuestions array\line
- 662b5d9: feat(cogs): Add Download Debug PDF button\line
\line
==================== TECHNICAL NOTES ====================\line
\line
SCRIBE.JS INTEGRATION:\line
- CDN: Available via npm or CDN\line
- License: AGPL 3.0 (need commercial license for proprietary use)\line
- API similar to Tesseract.js (easier migration)\line
- Table extraction: scribe.recognizeTable()\line
\line
TEMPLATE STRUCTURE (invoice2data style):\line
```yaml\line
issuer: Greenleaf\line
keywords:\line
  - Greenleaf\line
  - PO Box 45192\line
  - greenleafsf.com\line
fields:\line
  invoice_number: Number\\s+(\\d+)\line
  date: Date\\s+(\\d{2}/\\d{2}/\\d{2})\line
  amount: Total\\s+([\\d,]+\\.\\d{2})\line
tables:\line
  line_items:\line
    header: Ordered.*Shipped.*UOM.*Product\line
    columns:\line
      - quantity: \\d+\line
      - unit: EA|CS|DZ|LB\line
      - description: .*\line
      - unit_price: [\\d.]+\line
      - total: [\\d.]+\line
```\line
\line
==================== SESSION CONCLUSION ====================\line
\line
STATUS: Research complete, implementation ready\line
BLOCKER: Need user input on vendor priority and template details\line
READY TO: Implement Scribe.js + vendor templates when user provides mapping info\line
\line
CONTEXT NEARLY FULL: Session ended at user's request to save and close\line
\line
==================== END SESSION ====================\line
}
