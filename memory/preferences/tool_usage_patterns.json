{
  "development_patterns": {
    "code_approach": "Use existing patterns first before creating new ones",
    "dom_manipulation": "createElement() with direct property assignment, NOT innerHTML",
    "error_handling": "Fix root cause, never remove code to fix errors",
    "debugging_approach": "If >15min on same issue, rebuild correctly instead of iterating on broken code"
  },
  "git_workflow": {
    "commit_frequency": "After each feature/fix",
    "commit_style": "Conventional commits (feat/fix/refactor/docs)",
    "deployment": "Auto-deploy to production on main branch push",
    "testing": "Always test locally before deploying"
  },
  "documentation_workflow": {
    "during_session": "Minimal, focus on building",
    "end_of_session": "Update CURRENT_STATUS.md and PROJECT_MASTER_LOG.md",
    "rtf_sessions": "Save complete chat history to /chat sessions/ folder"
  },
  "design_patterns": {
    "styling": "Inline styles or <style> tags, no external frameworks",
    "ui_elements": "No rounded corners (border-radius: 0), heavy borders (2px)",
    "buttons": "All caps text, uppercase labels, consistent spacing",
    "colors": "Grayscale with accent colors for status only",
    "modals": "No window.alert/confirm/prompt, use inline feedback or custom modals"
  },
  "api_patterns": {
    "toast_pos": "Full pagination, check both order and check voids, use check.amount for net sales",
    "supabase": "JSONB for complex data, .single() for unique records, handle PGRST116 gracefully",
    "environment_vars": "NEVER hardcode secrets, always use process.env in backend"
  }
}
